Application MyApp {
	basePackage=org.seke
	Module filmanias {

		Entity Role {
			!auditable
			String name key;
			- Set<@User> users <-> roles;
			
			Repository RoleDAORepository {
				save;
				findAll;
			}
		}
		
		Service RoleService {
			List<@Role> retrieveAll => RoleDAORepository.findAll;
		}
		
		Entity User {
			!auditable
			Long id key;
			String username;
			String password;
			String eMail;
			boolean accountNonExpired;
			boolean accountNonLocked;
			boolean credentialsNonExpired;
			boolean enabled;
			- Set<@Movie> movies <-> user;
			- Set<@Comment> comments <-> user;
			- Set<@Rating> ratings <-> user;
			- Set<@Role> roles <-> users;
			
			Repository UserDAORepository {
				save;
				findById;
				findAll;
				@User getUser(String username);
				delete;				
			}
		}
		
		Service UserService {
			saveUser(@User user) => UserDAORepository.save;
			retrieveUser(Long id) => UserDAORepository.findById;
			List<@User> retrieveAllUsers() => UserDAORepository.findAll;
			@User retrieveUser(String username) => UserDAORepository.getUser;
			updateUser(@User user) => UserDAORepository.save;
			deleteUser(String username);
		}

		Entity Rating {
			!auditable
			Long id key;
			- @User user key <-> ratings;
			- @Movie movie key <-> ratings;
			int mark;
			Date inputDate;
			
			Repository RatingDAORepository {
				save;
			}
		}

		Entity Comment {
			!auditable
			Long id key;
			- @User user key <-> comments;
			- @Movie movie key <-> comments;
			String content;
			Date inputDate;
			
			Repository CommentDAORepository {
				save;
			}
		}

		Service CommentService {
			saveComment(@Comment comment, @User user);
		}
		
		Entity Movie {
			!auditable
			Long id key;
			String name;
			Date inputDate;
			Double rank;
			- @User user nullable <-> movies;
			- Set<@Comment> comments <-> movie;
			- Set<@Rating> ratings <-> movie;
			- Set<@Genre> genres <-> movies;
			
			Repository MovieDAORepository {
				save;
				findAll;
				List<@Movie> retrieveMoviesStartingWith(String movieName);
				findById;
			}
		}
		
		Service MovieService {
			saveMovie(MovieBeanDto movieBean);
			saveMovie(@Movie movie) => MovieDAORepository.save; 
			List<@Movie> retriveAllMovies() => MovieDAORepository.findAll;
			@Movie retrieveMovie(long id) => MovieDAORepository.findById;
			List<@Movie> retrieveMoviesStartingWith(String movieName) => MovieDAORepository.retrieveMoviesStartingWith;
			addMovieComment(long movieId, @Comment comment,String username);
		}

		DataTransferObject MovieBeanDto {
    		String name;
			List<GenreBeanDto> allGenres;
			Timestamp inputDate;
			User user;
		}

		Entity Genre {
			!auditable
			String name key;
			- Set<@Movie> movies <-> genres;
			
			Repository GenreDAORepository {
				save;
				findAll;
				@Genre findGenreByName(String name);
			}
		}
		
		Service GenreService {
			save => GenreDAORepository.save;
			getAllGenres => GenreDAORepository.findAll;
			List<GenreBeanDto> getAllGenreBeans;
			@Genre retrieveGenre(String name) => GenreDAORepository.findGenreByName;
			updateGenre(@Genre genre) => GenreDAORepository.save;			
		}
		
		DataTransferObject GenreBeanDto {
    		Genre genre;
			boolean assigned;
			String name;
		}
	}
}